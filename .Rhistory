main_title = "Qualification - POS tags",
sub_title = "Features: POS tags from the title, subtitle included or excluded",
x_title = "",
y_title = "",
legend_labels = c("H", "Precision", "Recall"),
#x_tick_labels = c("Main title only", "Whole title"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""))
devOptions
dev_mode
dev_mode()
dev.off
dev_mode()
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_caret_whole_title.*_mtry10__measures.txt",
"pos_caret_title_only.*_mtry10__measures.txt") ,
parameter_names = c("H", "Precision", "Recall", "F"),
group_names = c("Whole title", "Title only"),
outputfile = "Qualification - POS tags",
main_title = "Qualification - POS tags",
sub_title = "Features: POS tags from the title, subtitle included or excluded",
x_title = "",
y_title = "",
legend_labels = c("H", "Precision", "Recall", "F1"),
#x_tick_labels = c("Main title only", "Whole title"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 700,
space_between_bars = 0.1)
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_whole_title_ntree250_mtry5_confusionMatrix_combined_no_cutoff.txt",
"pos_whole_title_ntree250_mtry10_confusionMatrix_combined_no_cutoff.txt") ,
parameter_names = c("precision", "recall", "balanced_accuracy", "f"),
group_names = c("Mtry 5", "Mtry 10"),
outputfile = "Qualification - POS tags and the effect of mtry",
main_title = "Qualification - POS tags and the effect of mtry",
sub_title = "Features: POS tags from the whole title",
x_title = "",
y_title = "",
legend_labels = c("Precision", "Recall", "Balanced accuracy", "F1"),
#x_tick_labels = c("Mtry 5", "Mtry 10"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 700,
space_between_bars = 0.1,
newschool = TRUE)
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_whole_title_ntree250_mtry5_confusionMatrix_combined_no_cutoff.txt",
"pos_whole_title_ntree250_mtry10_confusionMatrix_combined_no_cutoff.txt") ,
parameter_names = c("precision", "recall", "balanced_accuracy", "f1"),
group_names = c("Mtry 5", "Mtry 10"),
outputfile = "Qualification - POS tags and the effect of mtry",
main_title = "Qualification - POS tags and the effect of mtry",
sub_title = "Features: POS tags from the whole title",
x_title = "",
y_title = "",
legend_labels = c("Precision", "Recall", "Balanced accuracy", "F1"),
#x_tick_labels = c("Mtry 5", "Mtry 10"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 700,
space_between_bars = 0.1,
newschool = TRUE)
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_whole_title_ntree250_mtry5_confusionMatrix_combined_no_cutoff.txt",
"pos_whole_title_ntree250_mtry10_confusionMatrix_combined_no_cutoff.txt") ,
parameter_names = c("precision", "recall", "balanced_accuracy", "fl"),
group_names = c("Mtry 5", "Mtry 10"),
outputfile = "Qualification - POS tags and the effect of mtry",
main_title = "Qualification - POS tags and the effect of mtry",
sub_title = "Features: POS tags from the whole title",
x_title = "",
y_title = "",
legend_labels = c("Precision", "Recall", "Balanced accuracy", "F1"),
#x_tick_labels = c("Mtry 5", "Mtry 10"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 700,
space_between_bars = 0.1,
newschool = TRUE)
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_whole_title_ntree250_mtry5_confusionMatrix_combined_no_cutoff.txt",
"pos_whole_title_ntree250_mtry10_confusionMatrix_combined_no_cutoff.txt") ,
parameter_names = c("precision", "recall", "balanced_accuracy", "f1"),
group_names = c("Mtry 5", "Mtry 10"),
outputfile = "Qualification - POS tags and the effect of mtry",
main_title = "Qualification - POS tags and the effect of mtry",
sub_title = "Features: POS tags from the whole title",
x_title = "",
y_title = "",
legend_labels = c("Precision", "Recall", "Balanced accuracy", "F1"),
#x_tick_labels = c("Mtry 5", "Mtry 10"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 700,
space_between_bars = 0.1,
newschool = TRUE)
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_whole_title_ntree250_mtry5_confusionMatrix_combined_no_cutoff.txt",
"pos_whole_title_ntree250_mtry10_confusionMatrix_combined_no_cutoff.txt") ,
parameter_names = c("precision", "recall", "balanced_accuracy", "f1"),
group_names = c("Mtry 5", "Mtry 10"),
outputfile = "Qualification - POS tags and the effect of mtry",
main_title = "Qualification - POS tags and the effect of mtry",
sub_title = "Features: POS tags from the whole title",
x_title = "",
y_title = "",
legend_labels = c("Precision", "Recall", "Balanced accuracy", "F1"),
#x_tick_labels = c("Mtry 5", "Mtry 10"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 700,
space_between_bars = 0.1,
newschool = TRUE)
debugSource('~/GitHub/Gradu/make_pic_comparison_bars.R', encoding = 'UTF-8')
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_whole_title_ntree250_mtry5_confusionMatrix_combined_no_cutoff.txt",
"pos_whole_title_ntree250_mtry10_confusionMatrix_combined_no_cutoff.txt") ,
parameter_names = c("precision", "recall", "balanced_accuracy", "f1"),
group_names = c("Mtry 5", "Mtry 10"),
outputfile = "Qualification - POS tags and the effect of mtry",
main_title = "Qualification - POS tags and the effect of mtry",
sub_title = "Features: POS tags from the whole title",
x_title = "",
y_title = "",
legend_labels = c("Precision", "Recall", "Balanced accuracy", "F1"),
#x_tick_labels = c("Mtry 5", "Mtry 10"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 700,
space_between_bars = 0.1,
newschool = TRUE)
parameter_names
rets[["pattern"]]
source('~/GitHub/Gradu/make_pic_comparison_bars.R', encoding = 'UTF-8')
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_whole_title_ntree250_mtry5_confusionMatrix_combined_no_cutoff.txt",
"pos_whole_title_ntree250_mtry10_confusionMatrix_combined_no_cutoff.txt") ,
parameter_names = c("precision", "recall", "balanced_accuracy", "F1"),
group_names = c("Mtry 5", "Mtry 10"),
outputfile = "Qualification - POS tags and the effect of mtry",
main_title = "Qualification - POS tags and the effect of mtry",
sub_title = "Features: POS tags from the whole title",
x_title = "",
y_title = "",
legend_labels = c("Precision", "Recall", "Balanced accuracy", "F1"),
#x_tick_labels = c("Mtry 5", "Mtry 10"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 700,
space_between_bars = 0.1,
newschool = TRUE)
source('~/GitHub/Gradu/make_all_pics.R')
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_trigrams_caret_whole_title.*_mtry10__measures.txt",
"pos_trigrams_caret_title_only.*_mtry10__measures.txt") ,
parameter_names = c("H", "Precision", "Recall", "F"),
group_names = c("Whole title", "Title only"),
outputfile = "Qualification - POS trigrams",
main_title = "Qualification - POS trigrams",
sub_title = "Features: POS trigrams from the title, subtitle included or excluded",
x_title = "",
y_title = "",
legend_labels = c("H", "Precision", "Recall", "F1"),
#x_tick_labels = c("Main title only", "Whole title"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""))
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_trigrams_whole_title_ntree250_mtry5_confusionMatrix_combined_no_cutoff.txt",
"pos_trigrams_whole_title_ntree250_mtry10_confusionMatrix_combined_no_cutoff.txt") ,
parameter_names = c("precision", "recall", "balanced_accuracy", "F1"),
group_names = c("Mtry 5", "Mtry 10"),
outputfile = "Qualification - POS trigrams and the effect of mtry",
main_title = "Qualification - POS trigrams and the effect of mtry",
sub_title = "Features: POS trigrams from the whole title",
x_title = "",
y_title = "",
legend_labels = c("Precision", "Recall", "Balanced accuracy", "F1"),
#x_tick_labels = c("Mtry 5", "Mtry 10"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
newschool = TRUE)
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_trigrams_caret_whole_title.*_mtry10__measures.txt",
"pos_trigrams_caret_title_only.*_mtry10__measures.txt") ,
parameter_names = c("H", "Precision", "Recall", "F"),
group_names = c("Whole title", "Title only"),
outputfile = "Qualification - POS trigrams",
main_title = "Qualification - POS trigrams",
sub_title = "Features: POS trigrams from the title, subtitle included or excluded",
x_title = "",
y_title = "",
legend_labels = c("H", "Precision", "Recall", "F1"),
#x_tick_labels = c("Main title only", "Whole title"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 700,
space_between_bars = 0.1)
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_trigrams_whole_title_ntree250_mtry5_confusionMatrix_combined_no_cutoff.txt",
"pos_trigrams_whole_title_ntree250_mtry10_confusionMatrix_combined_no_cutoff.txt") ,
parameter_names = c("precision", "recall", "balanced_accuracy", "F1"),
group_names = c("Mtry 5", "Mtry 10"),
outputfile = "Qualification - POS trigrams and the effect of mtry",
main_title = "Qualification - POS trigrams and the effect of mtry",
sub_title = "Features: POS trigrams from the whole title",
x_title = "",
y_title = "",
legend_labels = c("Precision", "Recall", "Balanced accuracy", "F1"),
#x_tick_labels = c("Mtry 5", "Mtry 10"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 700,
space_between_bars = 0.1
newschool = TRUE)
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_trigrams_whole_title_ntree250_mtry5_confusionMatrix_combined_no_cutoff.txt",
"pos_trigrams_whole_title_ntree250_mtry10_confusionMatrix_combined_no_cutoff.txt") ,
parameter_names = c("precision", "recall", "balanced_accuracy", "F1"),
group_names = c("Mtry 5", "Mtry 10"),
outputfile = "Qualification - POS trigrams and the effect of mtry",
main_title = "Qualification - POS trigrams and the effect of mtry",
sub_title = "Features: POS trigrams from the whole title",
x_title = "",
y_title = "",
legend_labels = c("Precision", "Recall", "Balanced accuracy", "F1"),
#x_tick_labels = c("Mtry 5", "Mtry 10"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 700,
space_between_bars = 0.1,
newschool = TRUE)
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_caret_whole_title_ntree250_mtry10__measures.txt",
"pos_trigrams_caret_whole_title_ntree250_mtry10__measures.txt") ,
parameter_names = c("H", "Precision", "Recall", "F"),
group_names = c("POS tags", "POS trigrams"),
outputfile = "POS tags versus POS trigrams",
main_title = "POS tags versus POS trigrams",
sub_title = "Mtry values 10, ntree 250",
x_title = "",
y_title = "",
legend_labels = c("H", "Precision", "Recall", "F1"),
#x_tick_labels = c("Main title only", "Whole title"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
)
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_caret_whole_title_ntree250_mtry10__measures.txt",
"pos_trigrams_caret_whole_title_ntree250_mtry10__measures.txt") ,
parameter_names = c("H", "Precision", "Recall", "F"),
group_names = c("POS tags", "POS trigrams"),
outputfile = "POS tags versus POS trigrams",
main_title = "POS tags versus POS trigrams",
sub_title = "Mtry values 10, ntree 250",
x_title = "",
y_title = "",
legend_labels = c("H", "Precision", "Recall", "F1"),
#x_tick_labels = c("Main title only", "Whole title"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 700,
space_between_bars = 0.1
)
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("basic_bow6_caret_whole_title_ntree250_mtry10__measures.txt",
"basic_bow15_caret_whole_title_ntree250_mtry10__measures.txt",
"basic_bow19_caret_whole_title_ntree250_mtry10__measures.txt") ,
parameter_names = c("H", "Precision", "Recall"),
group_names = c("Bow6", "Bow15", "Bow19"),
outputfile = "Bow size",
main_title = "Bow size",
sub_title = "Mtry values 10, ntree 250",
x_title = "",
y_title = "",
legend_labels = c("H", "Precision", "Recall"),
#x_tick_labels = c("Main title only", "Whole title"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
)
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("basic_bow6_caret_whole_title_ntree250_mtry10__measures.txt",
"basic_bow15_caret_whole_title_ntree250_mtry10__measures.txt",
"basic_bow19_caret_whole_title_ntree250_mtry10__measures.txt") ,
parameter_names = c("H", "Precision", "Recall"),
group_names = c("Bow6", "Bow15", "Bow19"),
outputfile = "Bow size",
main_title = "Bow size",
sub_title = "Mtry values 10, ntree 250",
x_title = "",
y_title = "",
legend_labels = c("H", "Precision", "Recall"),
#x_tick_labels = c("Main title only", "Whole title"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 700,
space_between_bars = 0.1
)
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("basic_bow18_ntree250_mtry10_confusionMatrix_combined_no_cutoff.txt",
"basic_bow18_stopmarks_ntree250_mtry10_confusionMatrix_combined_no_cutoff.txt",
"basic_bow18_antique_ntree250_mtry10_confusionMatrix_combined_no_cutoff.txt",
"basic_bow18_marc_ntree250_mtry10_confusionMatrix_combined_no_cutoff.txt",
"basic_bow18_nlp_ntree250_mtry10_confusionMatrix_combined_no_cutoff.txt") ,
parameter_names = c("precision", "recall", "balanced_accuracy", "F1"),
group_names = c("Vanilla", "with stopmarks", "with antique", "with MARC", "with NLP"),
outputfile = "Basic Bow and additions",
main_title = "Basic, Bag-of-words, and additions",
sub_title = "Mtry values 10, ntree 250",
x_title = "",
y_title = "",
legend_labels = c("Precision", "Recall", "Balanced accuracy", "F1"),
#x_tick_labels = c("Main title only", "Whole title"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width=850,
space_between_bars = 0.15,
newschool = TRUE)
source('~/GitHub/Gradu/make_all_pics.R')
feats_NLP1 <- readRDS(paste0(bu_path, "/features_NLP_20170803b.RDS"))
names(feats_NLP1)
feats_NLP1 <- feats_NLP1$no_of_root
names(feats_NLP1)
feats_NLP1 <- readRDS(paste0(bu_path, "/features_NLP_20170803b.RDS"))
feats_NLP1 <- feats_NLP1[,c("no_of_root")]
feats_NLP1 <- readRDS(paste0(bu_path, "/features_NLP_20170803b.RDS"))
feats_NLP1 <- feats_NLP1[,c("no_of_root")]
names(feats_NLP1)
feats_NLP1 <- readRDS(paste0(bu_path, "/features_NLP_20170803b.RDS"))
feats_NLP1 <- feats_NLP1[,c("no_of_root")]
names(feats_NLP1)
feats_NLP1[-c("no_of_root")] <- NULL
feats_NLP1[-"no_of_root"] <- NULL
feats_NLP1 <- data.frame(no_of_root=feats_NLP$no_of_root)
names(feats_NLP1)
saveRDS(feats_NLP1, paste0(bu_path, "/features_NLP1.RDS"))
feats_NLP4 <- feats_NLP[,c("no_of_root", "no_of_inflicted", "no_of_dependents", "root_offset_characters")]
feats_NLP4 <- feats_NLP[,c("no_of_root", "no_of_inflected", "no_of_dependents", "root_offset_characters")]
feats_NLP4 <- feats_NLP[,c("no_of_root",
"x_no_of_inflected_words",
"no_of_dependents",
"root_offset_characters_relative")]
saveRDS(feats_NLP4, paste0(bu_path, "/features_NLP4.RDS"))
source('~/GitHub/Gradu/make_all_pics.R')
df.estc <- readRDS("C:/Users/Hege/Työ/Kungliga/Aineisto/Kungliga/estc_df.Rds")
length(unique(df.estc$subject_topic))
length(grep("poetry", df.estc$subject_topic))
length(grep("poetry", df.estc$subject_topic, ignore.case = TRUE))
length(grep("poems", df.estc$subject_topic, ignore.case = TRUE))
length(grep("poem", df.estc$subject_topic, ignore.case = TRUE))
length(grep("love", df.estc$subject_topic, ignore.case = TRUE))
length(grep("antique", df.estc$subject_topic, ignore.case = TRUE))
length(grep("gods", df.estc$subject_topic, ignore.case = TRUE))
length(grep("religion", df.estc$subject_topic, ignore.case = TRUE))
df.estc$title[grep("poetry", df.estc$subject_topic, ignore.case = TRUE)[1:10]]
df.estc$genre[grep("poetry", df.estc$subject_topic, ignore.case = TRUE)[1:10]]
length(which(is.na((df.estc$subject_topic)))
)
poetry_inds <- which(feats_basic_bow18_NLP$is_poetry==TRUE)
df.estc <- NULL
df$topic[1:10]
length(which(is.na((df.estc$topic)))
)
df$genre[grep("poetry", df$topic, ignore.case = TRUE)[1:10]]
length(grep("poetry", df$topic, ignore.case = TRUE))
length(grep("poetry", df$topic[poetry_inds], ignore.case = TRUE))
length(grep("religion", df$topic[poetry_inds], ignore.case = TRUE))
length(grep("god", df$topic[poetry_inds], ignore.case = TRUE))
length(grep("rome", df$topic[poetry_inds], ignore.case = TRUE))
length(grep("love", df$topic[poetry_inds], ignore.case = TRUE))
length(grep("", df$topic[!poetry_inds], ignore.case = TRUE))
length(grep("poetry", df$topic[!poetry_inds], ignore.case = TRUE))
length(grep("poetry", df$topic[setdiff(poetry_inds,1:nrow(df)], ignore.case = TRUE))
length(grep("poetry", df$topic[setdiff(poetry_inds,1:nrow(df))], ignore.case = TRUE))
setdiff(poetry_inds,1:nrow(df))
setdiff(poetry_inds,nrow(df))
setdiff(poetry_inds,nrow(df))[1:10]
poetry_inds[1:10]
setdiff(nrow(df), poetry_inds)[1:10]
setdiff(1:nrow(df), poetry_inds)[1:10]
length(grep("poetry", df$topic[setdiff(1:nrow(df), poetry_inds)], ignore.case = TRUE))
length(grep("poetry", df$topic[intersect(setdiff(1:nrow(df), poetry_inds),which(df$genre==""))], ignore.case = TRUE))
kb <- readRDS("../../../Työ/Kungliga/Aineisto/Kungliga/df.combined.Rds")
combo <- kb
kb <- combo[which(combo$catalog=="Kungliga"),]
length(intersect(which(kb$publication_decade=="1860"), which(finskit$publication_place %in% c("Helsinki",
"Turku",
"Tampere",
"Vaasa",
"Pori",
"Porvoo",
"Uusikaupunki",
"Jyväskylä",
"Tammisaari",
"Hämeenlinna",
"Kuopio",
"Oulu",
"Vyborg"))))
finntowns_in_kb <- c("Helsinki", "Porvoo", "Turku", "Loviisa", "Tampere", "Kuopio", "Hämeenlinna",
"Jyväskylä", "Vaasa", "Kotka", "Oulu", "Pernaja", "Mariehamn", "Lohja",
"Hanko", "Hamina", "Pori", "Tammisaari", "Savonlinna", "Uusikaupunki", "Kokkola",
"Forssa", "Uusikaarlepyy", "Käkisalmi", "Joensuu", "Rauma", "Mikkeli", "Pietarsaari",
"Vyborg")
finskit <- kb[which(kb$publication_place %in% finntowns_in_kb),]
length(finskit$publication_decade[which(finskit$publication_decade=="1860")])
for (i in sec(1770,1890,10)) {print(i);print(length(finskit$short_title[which(finskit$publication_decade==as.character(i))]))}
for (i in seq(1770,1890,10)) {print(i);print(length(finskit$short_title[which(finskit$publication_decade==as.character(i))]))}
fennicas <- combo[which(combo$catalog=="Fennica"),]
for (i in seq(1770,1890,10)) {print(i);print(length(fennicas$short_title[which(fennicas$publication_decade==as.character(i))]))}
library(tidyr)
fennicas <- c(1833, 2005, 2054, 2354, 515, 576, 391, 552, 911, 1117, 2105, 4435, 9432)
finskit_kpl <- c(134,119,121,254,141,249,131,286,362,489,542,990,1430)
not_kpl <- c(10, 11, 11, 84, 97, 205,107,218,273,348,396,529,432)
df_kpl <- data.frame(Fennica=fennicas, Kungliga=finskit_kpl, prev_unknown=not_kpl)
row.names(df_kpl) <- c("1770", "1780", "1790", "1800", "1810", "1820", "1830", "1840", "1850", "1860", "1870", "1880", "1890")
df <- cbind(decade=row.names(df_kpl), df_kpl)
data_long <- gather(df, a, kpl, Fennica:prev_unknown, factor_key = TRUE )
df_addition <- data.frame(Fennica=fennicas, nas1=rep("", 8), nas2=rep("", 8))
df_addition <- cbind(decade=row.names(df_kpl), df_addition)
data_addition <- gather(df_addition, a, kpl, Fennica:nas2, factor_key=TRUE)
df_addition <- data.frame(Fennica=fennicas, nas1=rep("", 8), nas2=rep("", 8))
gain <- paste0(as.integer(10000 * (df$prev_unknown / (df$Fennica + df$prev_unknown))), "%")
gain <- c("","", "0.5%", "", "", "0.5%", "", "", "0.5%", "", "", "3.4%", "", "", "15.7%", "", "", "26.2%", "", "", "21.5%", "", "", "28.2%", "", "", "22.8%", "", "", "23.7%", "", "", "15.7%", "", "", "10.5%", "", "", "4.3%")
data_long2 <- cbind(data_long, gain)
png(filename = "C:\\Users\\Hege\\Työ\\Kungliga\\Output\\Number of records in Fennica and Kungliga4.png", width = 1000)
p <- ggplot(data=data_long2, aes(x=decade, y=kpl, fill=a)) +
geom_bar(stat="identity", position = "dodge") +
theme(legend.title=element_text(size=12, color="red"), axis.title.x = element_text(size=18), axis.title.y = element_text(size=18),
legend.text = element_text(size=14),
axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12),
plot.title = element_text(size=20),
plot.subtitle = element_text(size=14)
) +
geom_text(data=data_long2, aes(x=data_long2$decade, y=as.integer(data_long2$kpl)+500, group=data_long2$a),
label = format(data_long2$gain, nsmall = 0, digits=1, scientific = FALSE),
position=position_dodge(0.9)) +
scale_fill_discrete("", labels=c("Fennica (printed anywhere)", "Kungliga (printed in Finland)", "In Kungliga, but not in Fennica")) +
labs(title="Number of records in Fennica and Kungliga",
x="Decade", y="Number of records")
plot.new()
plot(p)
text("Percentages on top of the bars\nindicate the potential \nincrease of Fennica records\nif Kungliga records were added.", x=0.82, y=0.8, adj=0, col="red")
dev.off()
fennicas <- c(1833, 2005, 2054, 2354, 515, 576, 391, 552, 911, 1117, 2105, 4435, 9432)
finskit_kpl <- c(134,119,121,254,141,249,131,286,362,489,542,990,1430)
not_kpl <- c(10, 11, 11, 84, 97, 205,107,218,273,348,396,529,432)
gain <- paste0(as.integer(10000 * (df$prev_unknown / (df$Fennica + df$prev_unknown))), "%")
gain
gain <- percent (df$prev_unknown / (df$Fennica + df$prev_unknown))
gain
options(digits = 1)
gain <- percent(df$prev_unknown / (df$Fennica + df$prev_unknown))
gain
options(digits = 4)
gain <- percent(df$prev_unknown / (df$Fennica + df$prev_unknown))
gain
gain <- df$prev_unknown / (df$Fennica + df$prev_unknown)
gain
gain <- c("","", "0.5%",
"", "", "0.5%",
"", "", "3.4%",
"", "", "15.8%",
"", "", "26.2%",
"", "", "21.5%",
"", "", "28.3%",
"", "", "23.0%",
"", "", "23.8%",
"", "", "15.8%",
"", "", "10.7%",
"", "", "4.4%")
data_long2 <- cbind(data_long, gain)
png(filename = "C:\\Users\\Hege\\Työ\\Kungliga\\Output\\Number of records in Fennica and Kungliga5.png", width = 1000)
p <- ggplot(data=data_long2, aes(x=decade, y=kpl, fill=a)) +
geom_bar(stat="identity", position = "dodge") +
theme(legend.title=element_text(size=12, color="red"), axis.title.x = element_text(size=18), axis.title.y = element_text(size=18),
legend.text = element_text(size=14),
axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12),
plot.title = element_text(size=20),
plot.subtitle = element_text(size=14)
) +
geom_text(data=data_long2, aes(x=data_long2$decade, y=as.integer(data_long2$kpl)+500, group=data_long2$a),
label = format(data_long2$gain, nsmall = 0, digits=1, scientific = FALSE),
position=position_dodge(0.9)) +
scale_fill_discrete("", labels=c("Fennica (printed anywhere)", "Kungliga (printed in Finland)", "In Kungliga, but not in Fennica")) +
labs(title="Number of records in Fennica and Kungliga",
x="Decade", y="Number of records")
plot.new()
plot(p)
text("Percentages on top of the bars\nindicate the potential \nincrease of Fennica records\nif Kungliga records were added.", x=0.82, y=0.8, adj=0, col="red")
dev.off()
png(filename = "C:\\Users\\Hege\\Työ\\Kungliga\\Output\\Number of records in Fennica and Kungliga5.png", width = 1000)
p <- ggplot(data=data_long2, aes(x=decade, y=kpl, fill=a)) +
geom_bar(stat="identity", position = "dodge") +
theme(legend.title=element_text(size=12, color="red"), axis.title.x = element_text(size=18), axis.title.y = element_text(size=18),
legend.text = element_text(size=14),
axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12),
plot.title = element_text(size=20),
plot.subtitle = element_text(size=14)
) +
geom_text(data=data_long2, aes(x=data_long2$decade, y=as.integer(data_long2$kpl)+500, group=data_long2$a),
label = format(data_long2$gain, nsmall = 0, digits=1, scientific = FALSE),
position=position_dodge(0.9)) +
scale_fill_discrete("", labels=c("Fennica (printed anywhere)", "Kungliga (printed in Finland)", "In Kungliga, but not in Fennica")) +
labs(title="Number of records in Fennica and Kungliga",
subtitle="Potential gain to Fennica by adding records from Kungliga shown on top of the bars",
x="Decade", y="Number of records")
plot.new()
plot(p)
dev.off()
