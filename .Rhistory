ff <- data.table(features)
ff[c(1,k,25)]
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
nrow(tmp_feats)
tmp_feats
dt_features
dt_features(,c(j,k))
dt_features[],c(j,k)Â´]
dt_features[],c(j,k)]
dt_features[,c(j,k)]
dt_features[,c(1,k)]
dt_features[,c(1,k,25)]
dt_features[,c(1,as.numeric(k),25)]
paste("V", c(1,2,3,5), sep="")
names(dt_features)[c(j,k,25)]
nam <- names(dt_features)[c(j,k,25)]
dt_features[,nam]
dt_features[,nam, with=FALSE]
features(,nam, with=FALSE)
features[],nam, with=FALSE]
features[,nam, with=FALSE]
features[,c(j,k), with=FALSE]
features[,c(j,k,25), with=FALSE]
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
features[,c(1,2,25), with=FALSE]
features[,c(c,2,25), with=FALSE]
features[,c(j,2,25), with=FALSE]
features[,c(j,k,25), with=FALSE]
features[,c(j,k,which(names(features=="is_poetry"))), with=FALSE]
which(names(features)=="is_poetry")
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
tmp_ret
tmp_ret[1]
names(tmp_ret)
names(tmp_ret)[1]
names(tmp_ret)[2]
pairwise_rets
tmp_ret[1]
unname(tmp_ret[1])
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
tmp_feats
pairwise_rets
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
length(tmp_feats)
nrow(tmp_feats)
tmp_model
tryCatch(expr = "tmp_ret <- party::varimp(tmp_model, conditional = TRUE)", error=print(tmp_model))
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
pairwise_rets
which(names(features=="POS_freq_JJ_NN_NN"))
which(names(features)=="POS_freq_JJ_NN_NN")
which(names(features)=="POS_freq_NNP_A_DT")
cforest(is_poetry~., features[,c(15,16,25)], with=FALSE)
cforest(is_poetry~., features[,c(15,16,25)], controls=cforest_unbiased(mtry=2, ntree=1))
rrr <- cforest(is_poetry~., features[,c(15,16,25)], controls=cforest_unbiased(mtry=2, ntree=1))
party::varimp(rrr, conditional=TRUE)
length(which(features[,15]!=features[,16]))
length(intersect(which(features[,15]!=0),which(features[,16]!=0)))
length(intersect(which(features[,14]!=0),which(features[,16]!=0)))
length(intersect(which(features[,14]!=0),which(features[,11]!=0)))
length(intersect(which(features[,14]!=0),which(features[,1]!=0)))
length(intersect(which(features[,14]!=0),which(features[,1]==0)))
length(intersect(which(features[,15]!=0),which(features[,1]==0)))
length(intersect(which(features[,15]!=0),which(features[,16]==0)))
length(intersect(which(features[,16]!=0),which(features[,15]==0)))
length(intersect(which(features[,25]!="POETRY"),which(features[,15]==0)))
length(intersect(which(features[,25]=="POETRY"),which(features[,15]==0)))
length(intersect(which(features[,25]=="POETRY"),which(features[,15]!=0)))
length(intersect(which(features[,25]=="POETRY"),which(features[,16]!=0)))
rrr <- cforest(is_poetry~., features[,c(15,16,25)], controls=cforest_unbiased(mtry=2, ntree=100))
www <- party::varimp(rrr, conditional=TRUE)
rrr
mapply(pairwise_rets, FUN=function(x) {mean(x = x) })
lapply(pairwise_rets, FUN=function(x) {mean(x = x) })
tapply(pairwise_rets, 1,FUN=function(x) {mean(x = x) })
tapply(pairwise_rets, 2,FUN=function(x) {mean(x = x) })
vapply(pairwise_rets, 2,FUN=function(x) {mean(x = x) })
pairwise_rets
vapply(pairwise_rets,FUN=function(x) {mean(x = x) })
lapply(pairwise_rets,FUN=function(x) {mean(x = x) })
lapply(pairwise_rets,FUN=function(x) {print(x)})
mapply(pairwise_rets,FUN=function(x) {print(x)})
mapply(pairwise_rets,SIMPLIFY = FALSE,FUN=function(x) {print(x)})
mapply(pairwise_rets,SIMPLIFY = TRUE,FUN=function(x) {print(x)})
tapply(pairwise_rets,SIMPLIFY = TRUE,FUN=function(x) {print(x)})
tapply(pairwise_rets,FUN=function(x) {print(x)})
apply(pairwise_rets,1,FUN=function(x) {print(x)})
apply(pairwise_rets,2,FUN=function(x) {print(x)})
rowMeans(pairwise_rets)
rowMeans(pairwise_rets, na.rm = TRUE)
options(scipen = 3)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
variable_importance
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
formatC(variable_importance, difits=9)
formatC(variable_importance, digits=9)
formatC(variable_importance$rowMeans.pairwise_rets..na.rm...TRUE., digits=9)
names(variable_importance <- c("conditional_unbiased"))
names(variable_importance) <- c("conditional_unbiased"))
names(variable_importance) <- c("conditional_unbiased")
names(variable_importance)
variable_importance$conditional_unbiased
variable_importance
variable_importance <- data.frame(rowMeans(pairwise_rets, na.rm = TRUE))
names(variable_importance) <- c("conditional_unbiased")
variable_importance
formatC(variable_importance$conditional_unbiased, digits=9)
formatC(variable_importance$conditional_unbiased, digits=8, format="f")
vapply(variable_importance, FUN = function(x) {
if ((x%%1==0)) {
formatC(x, digits=9)
} else {
formatC(x=x, digits=8,format = "f")
}
})
lapply(variable_importance, FUN = function(x) {
if ((x%%1==0)) {
formatC(x, digits=9)
} else {
formatC(x=x, digits=8,format = "f")
}
})
unlist(lapply(variable_importance, FUN = function(x) {
if ((x%%1==0)) {
formatC(x, digits=9)
} else {
formatC(x=x, digits=8,format = "f")
}
})))
unlist(lapply(variable_importance, FUN = function(x) {
if ((x%%1==0)) {
formatC(x, digits=9)
} else {
formatC(x=x, digits=8,format = "f")
}
}))
unlist(unlist(lapply(variable_importance, FUN = function(x) {
if ((x%%1==0)) {
formatC(x, digits=9)
} else {
formatC(x=x, digits=8,format = "f")
}
})))
unname(unlist(lapply(variable_importance, FUN = function(x) {
if ((x%%1==0)) {
formatC(x, digits=9)
} else {
formatC(x=x, digits=8,format = "f")
}
})))
row.names(variable_importance)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
hmeas.check
summary(hmeas.check)
rf_Tune$results[1:10,]
hmeas.check$metrics
t(hmeas.check$metrics)
sink(file = paste0("C:/Users/Hege/Opiskelu/Kurssit/Gradu/output/", filestem, "_measures.txt")
sink(file = paste0("C:/Users/Hege/Opiskelu/Kurssit/Gradu/output/", filestem, "_measures.txt"))
print(t(hmeas.check))
sink()
sink(file = paste0("C:/Users/Hege/Opiskelu/Kurssit/Gradu/output/", filestem, "_measures.txt"))
print(t(hmeas.check$metrics))
sink()
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/init.R")
warnings()
fff <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_alt_whole_title100.RDS")
feats$is_poetry <- fff$is_poetry
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
qqq <- run_caret_rf_once(df = df, features = feats,filenamestem = "Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df = df, features = feats,filenamestem = "Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
qqq <- run_caret_rf_once(df = df, features = feats,filenamestem = "Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
qqq <- run_caret_rf_once(df = df, features = feats,filenamestem = "Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
qqq <- run_caret_rf_once(df = df, features = feats,filenamestem = "Poetry100_20170614", get_pairwise_comparison = TRUE)
rf_Tune$method
rf_Tune$modelInfo$label
rf_Tune$modelInfo$fit()
rf_Tune$modelInfo$fit
rf_Tune$results[1:10,]
nrow(rf_Tune$results)
rf_Tune$results
rf_Tune$pred[1:10,]
rf_Tune$pred[1:10]
rf_Tune$pred
rf_Tune$bestTune
rf_Tune$metric[1:10,]
rf_Tune$metric[1:10]
rf_Tune$control$method
rf_Tune$control$verboseIter
rf_Tune$control$trim
rf_Tune$control$allowParallel
rf_Tune$control$p
rf_Tune$finalModel
rf_Tune$preProcess
rf_Tune$trainingData
rf_Tune$resample
rf_Tune$resampledCM
rf_Tune$perfNames
rf_Tune$maximize
rf_Tune$yLimits
rf_Tune$times
rf_Tune$levels
rf_Tune$terms
rf_Tune$coefnames
rf_Tune$xlevels
rf_Tune$xlevels[1]
rf_Tune$results
hmeas.check
hmeas.check$metrics
sink(file = paste0("C:/Users/Hege/Opiskelu/Kurssit/Gradu/output/", filestem, "_variable_importance.txt"))
print(variable_importance)
sink()
rf_Tune$results
hmeas.check$metrics
source('~/GitHub/Gradu/run_caret_rf.R')
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
feats2 <- feats[,c(1:2,25)]
feats[1:10,]
feats2[1:10,]
feats2 <- feats[,c(1:2,101)]
feats2[1:10,]
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "Poetry100_20170614", get_pairwise_comparison = TRUE)
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
ratio_is_poetry
features$is_poetry
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
predictors(varLists)
varLists$optVariables
varLists$bestSubset
varLists$variables
varLists$fit
varLists$optVariables
varLists$resample
varLists$metric
varLists$maximize
varLists$perfNames
varLists$resampledCM
varLists$obsLevels
varLists$times
varLists <- rfe(x=features[,c(1:2)], y=is_poetry, sizes=c(2), rfeControl = rfeControl(functions=rfFuncs))
varLists$bestSubset
varLists$optVariables
varLists$resample
varLists$optVariables
varLists$metric
varLists$fit
varLists$perfNames
varLists$resampledCM
varLists$obsLevels
varLists$pred
varLists$variables
varLists$bestSubset
varLists$results
print(varLists)
print(predictors(varLists))
source('~/GitHub/Gradu/run_caret_rf.R')
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
feats2
names(feats)
names(feats2)
f2[-"is_poetry"]
f2[,-"is_poetry"]
f2[,c("is_poetry")]
feats2[,-"is_poetry"]
feats2[,-is_poetry]
feats2[,$is_poetry]
feats2[,names(1:"")]
feats2[,names(1:2)]
feats2[,c(1:2)]
feats2[,c(1:length(feats2))]
feats2[,c(1:length(feats2).1)]
feats2[,c(1:length(feats2)-1)]
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
f2
www <- 2
www <- 3
f2 <- features[,c(1:www)]
f2
f2 <- features
features$is_poetry <- NULL
f2
features2
features
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
feats_poetry_whole_title25 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title25_20170515.RDS")
feats_poetry_whole_title25$is_poetry <- feats2$is_poetry
feats_poetry_whole_title50 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title50_20170515.RDS")
feats_poetry_whole_title100 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title100_20170515.RDS")
feats_poetry_whole_title200 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title200_20170511.RDS")
feats_poetry_whole_title300 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title300_20170515.RDS")
feats_poetry_whole_title50$is_poetry <- feats2$is_poetry
feats_poetry_whole_title100$is_poetry <- feats2$is_poetry
feats_poetry_whole_title200$is_poetry <- feats2$is_poetry
feats_poetry_whole_title300$is_poetry <- feats2$is_poetry
saveRDS(feats_poetry_whole_title25, "C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title25_20170618.RDS")
saveRDS(feats_poetry_whole_title50, "C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title50_20170618.RDS")
saveRDS(feats_poetry_whole_title100, "C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title100_20170618.RDS")
saveRDS(feats_poetry_whole_title200, "C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title200_20170618.RDS")
saveRDS(feats_poetry_whole_title300, "C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title300_20170618.RDS")
source('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/init.R")
feats_poetry_whole_title25 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title25_20170618.RDS")
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title25, filenamestem = "Poetry25_20170619", get_pairwise_comparison = TRUE)
feats_poetry_whole_title25 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title25_20170618.RDS")
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title25, filenamestem = "Poetry25_20170619", get_pairwise_comparison = TRUE)
feats_poetry_whole_title50 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title50_20170618.RDS")
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title50, filenamestem = "Poetry50_20170619", get_pairwise_comparison = TRUE)
source('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
source('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title50, filenamestem = "Poetry50_20170619", get_pairwise_comparison = TRUE, get_rfe=FALSE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title50, filenamestem = "Poetry50_20170619", get_pairwise_comparison = TRUE, get_rfe=FALSE)
source('~/GitHub/Gradu/run_caret_rf_once.R')
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title50[,c(1,2,51)], filenamestem = "TEST_20170619", get_pairwise_comparison = TRUE, get_rfe=FALSE)
n
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title50[,c(1,2,51)], filenamestem = "TEST_20170619", get_pairwise_comparison = TRUE, get_rfe=FALSE)
prediction
cm <- confusionMatrix(data=prediction, reference=is_poetry2, positive="POETRY")
cm
source('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
feats_poetry_whole_title25 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title25_20170618.RDS")
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title25, filenamestem = "Poetry25_20170619b", get_pairwise_comparison = TRUE)
feats_poetry_whole_title50 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title50_20170618.RDS")
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title50, filenamestem = "Poetry50_20170619b", get_pairwise_comparison = TRUE)
feats_poetry_whole_title100 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title100_20170618.RDS")
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title100, filenamestem = "Poetry100_20170619b", get_pairwise_comparison = TRUE)
feats_poetry_whole_title200 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title200_20170618.RDS")
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title200, filenamestem = "Poetry200_20170619b", get_pairwise_comparison = TRUE)
feats_poetry_whole_title300 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title300_20170618.RDS")
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title300, filenamestem = "Poetry300_20170619b", get_pairwise_comparison = TRUE)
source("GitHub/Gradu/init.R")
f1 <- feats[1000:1999,c(1:2)]
f1$is_poetry <- df$is_poetry[1000:1999]
qqq <- randomForest(as.feature("is_poetry ~ poetry_tune"), data=f1[1:500], sampsize = 500, ntree=1, mtry=1)
qqq <- randomForest(as.formula("is_poetry ~ poetry_tune"), data=f1[1:500], sampsize = 500, ntree=1, mtry=1)
qqq <- randomForest(as.formula("is_poetry ~ poetry_tune"), data=f1[1:500,], sampsize = 500, ntree=1, mtry=1)
qqq$importance
qqq <- randomForest(as.formula("is_poetry ~ poetry_tune"), data=f1[1:500,], sampsize = 500, ntree=1, mtry=1)
qqq$importance
qqq <- randomForest(as.formula("is_poetry ~ poetry_tune"), data=f1[1:500,], sampsize = 500, ntree=1, mtry=1)
qqq$importance
qqq
qqq <- randomForest(as.formula("is_poetry ~ poetry_tune"), data=f1[1:500,], replace=FALSE, sampsize = 500, ntree=1, mtry=1)
qqq$importance
qqq <- randomForest(as.formula("is_poetry ~ poetry_tune"), data=f1[1:500,], replace=FALSE, sampsize = 500, ntree=1, mtry=1)
qqq$importance
qqq <- randomForest(as.formula("is_poetry ~ poetry_tune"), data=f1[1:499,], replace=FALSE, sampsize = 499, ntree=1, mtry=1)
qqq$importance
qqq <- randomForest(as.formula("is_poetry ~ poetry_tune"), data=f1[1:498,], replace=FALSE, sampsize = 498, ntree=1, mtry=1, )
qqq <- randomForest(as.formula("is_poetry ~ poetry_tune"), data=f1[1:498,], replace=FALSE, sampsize = 498, ntree=1, mtry=1 )
qqq$importance
qqq <- randomForest(as.formula("is_poetry ~ poetry_tune"), data=f1[2:499,], replace=FALSE, sampsize = 498, ntree=1, mtry=1 )
qqq$importance
qqq <- randomForest(as.formula("is_poetry ~ poetry_tune"), data=f1[2:499,], replace=FALSE, sampsize = 498, ntree=2, mtry=1 )
qqq$importance
qqq
fennica <- read.csv("C:/Users/Hege/TyÃ¶/Kungliga/Aineisto/Kungliga/fennica.csv.gz")
length(fennica)
fennica <- readRDS("C:/Users/Hege/TyÃ¶/Kungliga/Aineisto/Kungliga/df.fennica.Rds)
fennica <- readRDS("C:/Users/Hege/TyÃ¶/Kungliga/Aineisto/Kungliga/df.fennica.Rds")
length(fennica)
nrow(fennica)
fennica$publisher[1:10]
grep("FÃ¶rfattare F", fennica$publisher)
library(fennica)
install_github("comhis/fennica")
length(df$genre)
length(which(df$genre=="")) / length(df$genre)
length(which(df$genre!="")) / length(df$genre)
length(which(is.na(df$genre))) / length(df$genre)
length(which(df$genre!="")) / length(df$genre)
length(which(grep("((poetry)|(poem))", df$genre, ignore.case = TRUE))) / length(which(df$genre!=""))
length(which(grep("((poetry)|(poem))", df$genre, ignore.case = TRUE)) == TRUE) / length(which(df$genre!=""))
length(which(grep("((poetry)|(poem))", df$genre, ignore.case = TRUE) ==TRUE)) / length(which(df$genre!=""))
length(which(grep("((poetry)|(poem))", df$genre, ignore.case = TRUE) =="TRUE")) / length(which(df$genre!=""))
grep("((poetry)|(poem))", df$genre, ignore.case = TRUE)
length(grep("((poetry)|(poem))", df$genre, ignore.case = TRUE)) / length(which(df$genre!=""))
print("Ibn á¹¬ufayl, Muá¸¥ammad ibn Ê¿Abd al-Malik, -1185."")
print("Ibn á¹¬ufayl, Muá¸¥ammad ibn Ê¿Abd al-Malik, -1185.")
print("Ibn ufayl, Muá¸¥ammad ibn Ê¿Abd al-Malik, -1185.")
print("Ibn á¹¬")
print("Ibn á¹¬ufayl, .")
print("Ibn á¹¬ufayl, Muá¸¥ammad ibn Ê¿Abd al-Malik, -1185."")
print("Ibn á¹¬ufayl, Muá¸¥ammad ibn Ê¿Abd al-Malik, -1185.")
read.csv("C:/Users/Hege/test.txt")
read.csv("C:/Users/Hege/Desktop/test.txt")
read.csv("C:/Users/Hege/Desktop/test.txt", fileEncoding = "UTF-8")
read.csv("C:/Users/Hege/Desktop/test.txt", fileEncoding = "UTF-16")
read.csv("C:/Users/Hege/Desktop/test.txt", fileEncoding = "Latin1")
read.csv("C:/Users/Hege/Desktop/test.txt", fileEncoding = "cp1252")
read.csv2("C:/Users/Hege/Desktop/test.txt", fileEncoding = "cp1252")
read.csv2("C:/Users/Hege/Desktop/test.txt", fileEncoding = "UTF-8")
read.table("C:/Users/Hege/Desktop/test.txt", fileEncoding = "UTF-8")
data("C:/Users/Hege/Desktop/test.txt")
read.delim("C:/Users/Hege/Desktop/test.txt", fileEncoding = "UTF-8")
read.delim2("C:/Users/Hege/Desktop/test.txt", fileEncoding = "UTF-8")
read.delim2("C:/Users/Hege/Desktop/test.txt", fileEncoding = "UTF-8", as.is = TRUE)
read.csv("C:/Users/Hege/Desktop/test.txt", fileEncoding = "UTF-8", as.is = TRUE)
read.csv("C:/Users/Hege/Desktop/test.txt", fileEncoding = "UTF-8",allowEscapes = TRUE)
read.csv("C:/Users/Hege/Desktop/test.txt", fileEncoding = "UTF-8",allowEscapes = FALSE)
read.csv("C:/Users/Hege/Desktop/test.txt",encoding = "UTF-8")
read.csv("C:/Users/Hege/Desktop/test.txt",encoding = "Unicode")
qqq <- read.csv("C:/Users/Hege/Desktop/test.txt",encoding = "Unicode")
head(qqq)
qqq <- read.csv("C:/Users/Hege/Desktop/test.txt",encoding = "UTF-8")
head(qqq)
length(qqq)
length(qqq[1])
nchar(qqq)
substr(qqq, start = 1, stop=10)
substr(x=qqq, start = 1, stop=10)
substr(x=qqq, start = 1)
substr(x=qqq, start = 1, stop=2)
as.character(qqq)
qqq
as.character(qqq[1])
qqq <- read.csv("C:/Users/Hege/Desktop/estc_authors_cleaned.csv",encoding = "UTF-8")
grep("^Ibn", qqq)
length(qqq)
nrow(qqq)
grep("^\"Ibn", qqq)
qqq[1:10,]
grep("^\"Ibn", qqq$V2)
grep("^Ibn", qqq$V2)
qqq$V2[grep("^Ibn", qqq$V2)]
library(readr)
library(readR)
Sys.getlocale()
options
options("encoding")
qqq <- str_split(df$whole_title_sans_edition[1000:1000], " ")
qqq <- str_split(df$whole_title_sans_edition[1000:1010], " ")
length(qqq)
qq <- paste(qqq)
qq
qqq
unlist(qqq)
unique(unlist(qqq))
length(unique(unlist(qqq)))
qqq <- unlist(str_split(df$whole_title_sans_edition[1000:1010], " "))
length(qqq)
qqq <- unlist(str_split(df$whole_title_sans_edition, " "))
length(qqq)
qqq <- unlist(str_extract_all(df$whole_title_sans_edition, "([[:lower:]]|[[:upper:]])+"))
length(unique(qqq))
qq <- tolower(qqq)
length(qq)
qq[1:10]
length(unique(qq))
