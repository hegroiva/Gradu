features[,nam, with=FALSE]
features[,c(j,k), with=FALSE]
features[,c(j,k,25), with=FALSE]
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
features[,c(1,2,25), with=FALSE]
features[,c(c,2,25), with=FALSE]
features[,c(j,2,25), with=FALSE]
features[,c(j,k,25), with=FALSE]
features[,c(j,k,which(names(features=="is_poetry"))), with=FALSE]
which(names(features)=="is_poetry")
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
tmp_ret
tmp_ret[1]
names(tmp_ret)
names(tmp_ret)[1]
names(tmp_ret)[2]
pairwise_rets
tmp_ret[1]
unname(tmp_ret[1])
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
tmp_feats
pairwise_rets
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
length(tmp_feats)
nrow(tmp_feats)
tmp_model
tryCatch(expr = "tmp_ret <- party::varimp(tmp_model, conditional = TRUE)", error=print(tmp_model))
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
pairwise_rets
which(names(features=="POS_freq_JJ_NN_NN"))
which(names(features)=="POS_freq_JJ_NN_NN")
which(names(features)=="POS_freq_NNP_A_DT")
cforest(is_poetry~., features[,c(15,16,25)], with=FALSE)
cforest(is_poetry~., features[,c(15,16,25)], controls=cforest_unbiased(mtry=2, ntree=1))
rrr <- cforest(is_poetry~., features[,c(15,16,25)], controls=cforest_unbiased(mtry=2, ntree=1))
party::varimp(rrr, conditional=TRUE)
length(which(features[,15]!=features[,16]))
length(intersect(which(features[,15]!=0),which(features[,16]!=0)))
length(intersect(which(features[,14]!=0),which(features[,16]!=0)))
length(intersect(which(features[,14]!=0),which(features[,11]!=0)))
length(intersect(which(features[,14]!=0),which(features[,1]!=0)))
length(intersect(which(features[,14]!=0),which(features[,1]==0)))
length(intersect(which(features[,15]!=0),which(features[,1]==0)))
length(intersect(which(features[,15]!=0),which(features[,16]==0)))
length(intersect(which(features[,16]!=0),which(features[,15]==0)))
length(intersect(which(features[,25]!="POETRY"),which(features[,15]==0)))
length(intersect(which(features[,25]=="POETRY"),which(features[,15]==0)))
length(intersect(which(features[,25]=="POETRY"),which(features[,15]!=0)))
length(intersect(which(features[,25]=="POETRY"),which(features[,16]!=0)))
rrr <- cforest(is_poetry~., features[,c(15,16,25)], controls=cforest_unbiased(mtry=2, ntree=100))
www <- party::varimp(rrr, conditional=TRUE)
rrr
mapply(pairwise_rets, FUN=function(x) {mean(x = x) })
lapply(pairwise_rets, FUN=function(x) {mean(x = x) })
tapply(pairwise_rets, 1,FUN=function(x) {mean(x = x) })
tapply(pairwise_rets, 2,FUN=function(x) {mean(x = x) })
vapply(pairwise_rets, 2,FUN=function(x) {mean(x = x) })
pairwise_rets
vapply(pairwise_rets,FUN=function(x) {mean(x = x) })
lapply(pairwise_rets,FUN=function(x) {mean(x = x) })
lapply(pairwise_rets,FUN=function(x) {print(x)})
mapply(pairwise_rets,FUN=function(x) {print(x)})
mapply(pairwise_rets,SIMPLIFY = FALSE,FUN=function(x) {print(x)})
mapply(pairwise_rets,SIMPLIFY = TRUE,FUN=function(x) {print(x)})
tapply(pairwise_rets,SIMPLIFY = TRUE,FUN=function(x) {print(x)})
tapply(pairwise_rets,FUN=function(x) {print(x)})
apply(pairwise_rets,1,FUN=function(x) {print(x)})
apply(pairwise_rets,2,FUN=function(x) {print(x)})
rowMeans(pairwise_rets)
rowMeans(pairwise_rets, na.rm = TRUE)
options(scipen = 3)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
variable_importance
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
formatC(variable_importance, difits=9)
formatC(variable_importance, digits=9)
formatC(variable_importance$rowMeans.pairwise_rets..na.rm...TRUE., digits=9)
names(variable_importance <- c("conditional_unbiased"))
names(variable_importance) <- c("conditional_unbiased"))
names(variable_importance) <- c("conditional_unbiased")
names(variable_importance)
variable_importance$conditional_unbiased
variable_importance
variable_importance <- data.frame(rowMeans(pairwise_rets, na.rm = TRUE))
names(variable_importance) <- c("conditional_unbiased")
variable_importance
formatC(variable_importance$conditional_unbiased, digits=9)
formatC(variable_importance$conditional_unbiased, digits=8, format="f")
vapply(variable_importance, FUN = function(x) {
if ((x%%1==0)) {
formatC(x, digits=9)
} else {
formatC(x=x, digits=8,format = "f")
}
})
lapply(variable_importance, FUN = function(x) {
if ((x%%1==0)) {
formatC(x, digits=9)
} else {
formatC(x=x, digits=8,format = "f")
}
})
unlist(lapply(variable_importance, FUN = function(x) {
if ((x%%1==0)) {
formatC(x, digits=9)
} else {
formatC(x=x, digits=8,format = "f")
}
})))
unlist(lapply(variable_importance, FUN = function(x) {
if ((x%%1==0)) {
formatC(x, digits=9)
} else {
formatC(x=x, digits=8,format = "f")
}
}))
unlist(unlist(lapply(variable_importance, FUN = function(x) {
if ((x%%1==0)) {
formatC(x, digits=9)
} else {
formatC(x=x, digits=8,format = "f")
}
})))
unname(unlist(lapply(variable_importance, FUN = function(x) {
if ((x%%1==0)) {
formatC(x, digits=9)
} else {
formatC(x=x, digits=8,format = "f")
}
})))
row.names(variable_importance)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df=df, features = feats, filenamestem = "TEST_TEST")
hmeas.check
summary(hmeas.check)
rf_Tune$results[1:10,]
hmeas.check$metrics
t(hmeas.check$metrics)
sink(file = paste0("C:/Users/Hege/Opiskelu/Kurssit/Gradu/output/", filestem, "_measures.txt")
sink(file = paste0("C:/Users/Hege/Opiskelu/Kurssit/Gradu/output/", filestem, "_measures.txt"))
print(t(hmeas.check))
sink()
sink(file = paste0("C:/Users/Hege/Opiskelu/Kurssit/Gradu/output/", filestem, "_measures.txt"))
print(t(hmeas.check$metrics))
sink()
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/init.R")
warnings()
fff <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_alt_whole_title100.RDS")
feats$is_poetry <- fff$is_poetry
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
qqq <- run_caret_rf_once(df = df, features = feats,filenamestem = "Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
qqq <- run_caret_rf_once(df = df, features = feats,filenamestem = "Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
qqq <- run_caret_rf_once(df = df, features = feats,filenamestem = "Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
qqq <- run_caret_rf_once(df = df, features = feats,filenamestem = "Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
qqq <- run_caret_rf_once(df = df, features = feats,filenamestem = "Poetry100_20170614", get_pairwise_comparison = TRUE)
rf_Tune$method
rf_Tune$modelInfo$label
rf_Tune$modelInfo$fit()
rf_Tune$modelInfo$fit
rf_Tune$results[1:10,]
nrow(rf_Tune$results)
rf_Tune$results
rf_Tune$pred[1:10,]
rf_Tune$pred[1:10]
rf_Tune$pred
rf_Tune$bestTune
rf_Tune$metric[1:10,]
rf_Tune$metric[1:10]
rf_Tune$control$method
rf_Tune$control$verboseIter
rf_Tune$control$trim
rf_Tune$control$allowParallel
rf_Tune$control$p
rf_Tune$finalModel
rf_Tune$preProcess
rf_Tune$trainingData
rf_Tune$resample
rf_Tune$resampledCM
rf_Tune$perfNames
rf_Tune$maximize
rf_Tune$yLimits
rf_Tune$times
rf_Tune$levels
rf_Tune$terms
rf_Tune$coefnames
rf_Tune$xlevels
rf_Tune$xlevels[1]
rf_Tune$results
hmeas.check
hmeas.check$metrics
sink(file = paste0("C:/Users/Hege/Opiskelu/Kurssit/Gradu/output/", filestem, "_variable_importance.txt"))
print(variable_importance)
sink()
rf_Tune$results
hmeas.check$metrics
source('~/GitHub/Gradu/run_caret_rf.R')
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
feats2 <- feats[,c(1:2,25)]
feats[1:10,]
feats2[1:10,]
feats2 <- feats[,c(1:2,101)]
feats2[1:10,]
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "Poetry100_20170614", get_pairwise_comparison = TRUE)
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
ratio_is_poetry
features$is_poetry
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
predictors(varLists)
varLists$optVariables
varLists$bestSubset
varLists$variables
varLists$fit
varLists$optVariables
varLists$resample
varLists$metric
varLists$maximize
varLists$perfNames
varLists$resampledCM
varLists$obsLevels
varLists$times
varLists <- rfe(x=features[,c(1:2)], y=is_poetry, sizes=c(2), rfeControl = rfeControl(functions=rfFuncs))
varLists$bestSubset
varLists$optVariables
varLists$resample
varLists$optVariables
varLists$metric
varLists$fit
varLists$perfNames
varLists$resampledCM
varLists$obsLevels
varLists$pred
varLists$variables
varLists$bestSubset
varLists$results
print(varLists)
print(predictors(varLists))
source('~/GitHub/Gradu/run_caret_rf.R')
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
feats2
names(feats)
names(feats2)
f2[-"is_poetry"]
f2[,-"is_poetry"]
f2[,c("is_poetry")]
feats2[,-"is_poetry"]
feats2[,-is_poetry]
feats2[,$is_poetry]
feats2[,names(1:"")]
feats2[,names(1:2)]
feats2[,c(1:2)]
feats2[,c(1:length(feats2))]
feats2[,c(1:length(feats2).1)]
feats2[,c(1:length(feats2)-1)]
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
f2
www <- 2
www <- 3
f2 <- features[,c(1:www)]
f2
f2 <- features
features$is_poetry <- NULL
f2
features2
features
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/run_caret_rf_once.R")
qqq <- run_caret_rf_once(df = df, features = feats2,filenamestem = "TEST_Poetry100_20170614", get_pairwise_comparison = TRUE)
feats_poetry_whole_title25 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title25_20170515.RDS")
feats_poetry_whole_title25$is_poetry <- feats2$is_poetry
feats_poetry_whole_title50 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title50_20170515.RDS")
feats_poetry_whole_title100 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title100_20170515.RDS")
feats_poetry_whole_title200 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title200_20170511.RDS")
feats_poetry_whole_title300 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title300_20170515.RDS")
feats_poetry_whole_title50$is_poetry <- feats2$is_poetry
feats_poetry_whole_title100$is_poetry <- feats2$is_poetry
feats_poetry_whole_title200$is_poetry <- feats2$is_poetry
feats_poetry_whole_title300$is_poetry <- feats2$is_poetry
saveRDS(feats_poetry_whole_title25, "C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title25_20170618.RDS")
saveRDS(feats_poetry_whole_title50, "C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title50_20170618.RDS")
saveRDS(feats_poetry_whole_title100, "C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title100_20170618.RDS")
saveRDS(feats_poetry_whole_title200, "C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title200_20170618.RDS")
saveRDS(feats_poetry_whole_title300, "C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title300_20170618.RDS")
source('~/GitHub/Gradu/run_caret_rf.R')
source("GitHub/Gradu/init.R")
feats_poetry_whole_title25 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title25_20170618.RDS")
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title25, filenamestem = "Poetry25_20170619", get_pairwise_comparison = TRUE)
feats_poetry_whole_title25 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title25_20170618.RDS")
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title25, filenamestem = "Poetry25_20170619", get_pairwise_comparison = TRUE)
feats_poetry_whole_title50 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title50_20170618.RDS")
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title50, filenamestem = "Poetry50_20170619", get_pairwise_comparison = TRUE)
source('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
source('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title50, filenamestem = "Poetry50_20170619", get_pairwise_comparison = TRUE, get_rfe=FALSE)
debugSource('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title50, filenamestem = "Poetry50_20170619", get_pairwise_comparison = TRUE, get_rfe=FALSE)
source('~/GitHub/Gradu/run_caret_rf_once.R')
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title50[,c(1,2,51)], filenamestem = "TEST_20170619", get_pairwise_comparison = TRUE, get_rfe=FALSE)
n
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title50[,c(1,2,51)], filenamestem = "TEST_20170619", get_pairwise_comparison = TRUE, get_rfe=FALSE)
prediction
cm <- confusionMatrix(data=prediction, reference=is_poetry2, positive="POETRY")
cm
source('~/GitHub/Gradu/run_caret_rf.R')
source('~/GitHub/Gradu/run_caret_rf_once.R')
feats_poetry_whole_title25 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title25_20170618.RDS")
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title25, filenamestem = "Poetry25_20170619b", get_pairwise_comparison = TRUE)
feats_poetry_whole_title50 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title50_20170618.RDS")
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title50, filenamestem = "Poetry50_20170619b", get_pairwise_comparison = TRUE)
feats_poetry_whole_title100 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title100_20170618.RDS")
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title100, filenamestem = "Poetry100_20170619b", get_pairwise_comparison = TRUE)
feats_poetry_whole_title200 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title200_20170618.RDS")
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title200, filenamestem = "Poetry200_20170619b", get_pairwise_comparison = TRUE)
feats_poetry_whole_title300 <- readRDS("C:/Users/Hege/Opiskelu/Kurssit/Gradu/feats_poetry_whole_title300_20170618.RDS")
qqq <- run_caret_rf_once(df=df, features=feats_poetry_whole_title300, filenamestem = "Poetry300_20170619b", get_pairwise_comparison = TRUE)
source("GitHub/Gradu/init.R")
source('~/GitHub/Gradu/get_topic_features.R')
feats_topic100 <- get_topic_features(df, 100, prefix = "topics")
source("get_genre_word_freqs_alt.R")
source('~/GitHub/Gradu/get_topic_features.R')
feats_topic100 <- get_topic_features(df, 100, prefix = "topics")
feats_topic100 <- get_topic_features(df, 100, prefix = "top")
source('~/GitHub/Gradu/get_topic_features.R')
feats_topic100 <- get_topic_features(df, 100, prefix = "top")
source('~/GitHub/Gradu/get_topic_features.R')
feats_topic100 <- get_topic_features(df, 100, prefix = "top")
source('~/GitHub/Gradu/get_topic_features.R')
feats_topic100 <- get_topic_features(df, 100, prefix = "top")
source('~/GitHub/Gradu/get_topic_features.R')
feats_topic100 <- get_topic_features(df, 100, prefix = "top")
source('~/GitHub/Gradu/get_topic_features.R')
feats_topic100 <- get_topic_features(df, 100, prefix = "topic")
saveRDS(feats_topic100, paste0(bu_path, "/features_topic100.RDS"))
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_caret_whole_title_ntree250_mtry10__measures.txt",
"pos_trigrams_caret_whole_title_ntree250_mtry10__measures.txt",
"nlp_caret_ntree250_mtry4__measures.txt",
"poetry100caret_whole_title_alt_ntree250_mtry10_B__measures.txt",
"topic100_caret_ntree250_mtry10__measures.txt") ,
parameter_names = c("H", "Precision", "Recall", "F"),
group_names = c("POS tags", "POS trigrams", "Dependency relation", "Poetry100"),
outputfile = "QualificationComparison",
main_title = "Comparison of different predictor sets",
sub_title = "Mtry values 10, ntree 250, except for dependency relations mtry=4",
x_title = "",
y_title = "",
legend_labels = c("H", "Precision", "Recall", "F1"),
#x_tick_labels = c("Main title only", "Whole title"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 800,
space_between_bars = 0.15)
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_caret_whole_title_ntree250_mtry10__measures.txt",
"pos_trigrams_caret_whole_title_ntree250_mtry10__measures.txt",
"nlp_caret_ntree250_mtry4__measures.txt",
"poetry100caret_whole_title_alt_ntree250_mtry10_B__measures.txt",
"topic100_caret_ntree250_mtry10_measures.txt") ,
parameter_names = c("H", "Precision", "Recall", "F"),
group_names = c("POS tags", "POS trigrams", "Dependency relation", "Poetry100"),
outputfile = "QualificationComparison",
main_title = "Comparison of different predictor sets",
sub_title = "Mtry values 10, ntree 250, except for dependency relations mtry=4",
x_title = "",
y_title = "",
legend_labels = c("H", "Precision", "Recall", "F1"),
#x_tick_labels = c("Main title only", "Whole title"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 800,
space_between_bars = 0.15)
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_caret_whole_title_ntree250_mtry10__measures.txt",
"pos_trigrams_caret_whole_title_ntree250_mtry10__measures.txt",
"nlp_caret_ntree250_mtry4__measures.txt",
"poetry100caret_whole_title_alt_ntree250_mtry10_B__measures.txt",
"topic100_caret_ntree250_mtry10__measures.txt") ,
parameter_names = c("H", "Precision", "Recall", "F"),
group_names = c("POS tags", "POS trigrams", "Dependency relation", "Poetry100"),
outputfile = "QualificationComparison",
main_title = "Comparison of different predictor sets",
sub_title = "Mtry values 10, ntree 250, except for dependency relations mtry=4",
x_title = "",
y_title = "",
legend_labels = c("H", "Precision", "Recall", "F1"),
#x_tick_labels = c("Main title only", "Whole title"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 800,
space_between_bars = 0.15)
debugSource('~/GitHub/Gradu/make_pic_comparison_bars.R', encoding = 'UTF-8')
source('~/GitHub/Gradu/make_pic_comparison_bars.R', encoding = 'UTF-8')
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_caret_whole_title_ntree250_mtry10__measures.txt",
"pos_trigrams_caret_whole_title_ntree250_mtry10__measures.txt",
"nlp_caret_ntree250_mtry4__measures.txt",
"poetry100caret_whole_title_alt_ntree250_mtry10_B__measures.txt",
"topic100_caret_ntree250_mtry10__measures.txt") ,
parameter_names = c("H", "Precision", "Recall", "F"),
group_names = c("POS tags", "POS trigrams", "Dependency relation", "Poetry100", "Topic"),
outputfile = "QualificationComparison",
main_title = "Comparison of different predictor sets",
sub_title = "Mtry values 10, ntree 250, except for dependency relations mtry=4",
x_title = "",
y_title = "",
legend_labels = c("H", "Precision", "Recall", "F1"),
#x_tick_labels = c("Main title only", "Whole title"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 800,
space_between_bars = 0.15)
make_pic_comparison_bars(filepath=outputpath,
inputfile_patterns = c("pos_caret_whole_title_ntree250_mtry10__measures.txt",
"pos_trigrams_caret_whole_title_ntree250_mtry10__measures.txt",
"nlp_caret_ntree250_mtry4__measures.txt",
"poetry100caret_whole_title_alt_ntree250_mtry10_B__measures.txt",
"topic100_caret_ntree250_mtry10__measures.txt") ,
parameter_names = c("H", "Precision", "Recall", "F"),
group_names = c("POS tags", "POS trigrams", "Dependency relation", "Poetry100", "Topic"),
outputfile = "QualificationComparison",
main_title = "Comparison of different predictor sets",
sub_title = "Mtry values 10, ntree 250, except for dependency relations mtry=4",
x_title = "",
y_title = "",
legend_labels = c("H", "Precision", "Recall", "F1"),
#x_tick_labels = c("Main title only", "Whole title"),
#x_tick_breaks = c(1,2),
legend_title_parentheses=c(""),
total_width = 1000,
space_between_bars = 0.15)
all_topics <- df$topic
all_topics[which(all_topics=="")] <- df$topic_uniform_sub_form[which(all_topics=="")]
all_topics[which(all_topics=="")] <- df$topic_corporate_sub_form[which(all_topics=="")]
all_topics[which(all_topics=="")] <- df$topic_person_sub_form[which(all_topics=="")]
length(grep("(^|:::)poetry(:::|$)"), all_topics)
length(grep("(^|:::)poetry(:::|$)", all_topics))
length(grep("(^|:::)poetry(:::|$)", all_topics, ignore.case = TRUE))
length(grep("(^|:::)english, poetry(:::|$)", all_topics, ignore.case = TRUE))
length(grep("(^|:::)poetry, english(:::|$)", all_topics, ignore.case = TRUE))
length(grep("(^|:::)english poetry(:::|$)", all_topics, ignore.case = TRUE))
length(grep("(^|:::)ballads, english(:::|$)", all_topics, ignore.case = TRUE))
length(grep("(^|:::)christian poetry, english(:::|$)", all_topics, ignore.case = TRUE))
length(grep("(^|:::)narrative poetry, english(:::|$)", all_topics, ignore.case = TRUE))
length(grep("(^|:::)verse satire, english(:::|$)", all_topics, ignore.case = TRUE))
length(grep("(^|:::)odes, english(:::|$)", all_topics, ignore.case = TRUE))
length(grep("(^|:::)hymns, english(:::|$)", all_topics, ignore.case = TRUE))
length(grep("(^|:::)epistolary poetry, english(:::|$)", all_topics, ignore.case = TRUE))
length(grep("(^|:::)elegiac poetry, english(:::|$)", all_topics, ignore.case = TRUE))
length(grep("(^|:::)songs, english(:::|$)", all_topics, ignore.case = TRUE))
length(grep("(^|:::)(songs, english)|(poetry)|(english poetry)|(ballads, english)(:::|$)", all_topics, ignore.case = TRUE))
23635/310112
nrow(df)
23635/483344
source('~/GitHub/Gradu/make_all_pics.R')
source('~/GitHub/Gradu/get_topic_features.R')
